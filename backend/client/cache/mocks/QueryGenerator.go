// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	model "ygodraft/backend/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// QueryGenerator is an autogenerated mock type for the QueryGenerator type
type QueryGenerator struct {
	mock.Mock
}

// InsertCard provides a mock function with given fields: card
func (_m *QueryGenerator) InsertCard(card *model.Card) (string, error) {
	ret := _m.Called(card)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.Card) string); ok {
		r0 = rf(card)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Card) error); ok {
		r1 = rf(card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSet provides a mock function with given fields: set
func (_m *QueryGenerator) InsertSet(set model.CardSet) (string, error) {
	ret := _m.Called(set)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.CardSet) string); ok {
		r0 = rf(set)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CardSet) error); ok {
		r1 = rf(set)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllCards provides a mock function with given fields:
func (_m *QueryGenerator) SelectAllCards() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllCardsWithFilter provides a mock function with given fields: filter
func (_m *QueryGenerator) SelectAllCardsWithFilter(filter model.CardFilter) (string, error) {
	ret := _m.Called(filter)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.CardFilter) string); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CardFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllSets provides a mock function with given fields:
func (_m *QueryGenerator) SelectAllSets() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCardByID provides a mock function with given fields: id
func (_m *QueryGenerator) SelectCardByID(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectSetByCode provides a mock function with given fields: cardSet
func (_m *QueryGenerator) SelectSetByCode(cardSet string) (string, error) {
	ret := _m.Called(cardSet)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cardSet)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cardSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueryGenerator creates a new instance of QueryGenerator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryGenerator(t testing.TB) *QueryGenerator {
	mock := &QueryGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
