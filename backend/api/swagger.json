{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/cards": {
            "get": {
                "description": "Endpoint used to retrieve all cards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Endpoint used to retrieve all cards.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetCards.getCardResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/random": {
            "get": {
                "description": "Retrieve a certain amount of random card at once. Calling the endpoint without any parameters returns\na only one random card.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Retrieve a certain amount of random card at once.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Determines the amount of random cards to be returned.",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Contains the filtered sets, separated by comma, e.g., 'Set 1,Set 2,Set 3'",
                        "name": "sets",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Contains the filtered types, separated by comma, e.g., 'Fire, Water, Dragon'",
                        "name": "types",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetRandomCards.getRandomCardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{cardID}": {
            "get": {
                "description": "Endpoint used to retrieve a specific cards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Endpoint used to retrieve a specific card.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The id of the requested card.",
                        "name": "cardID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Card"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "The user provides his credentials and receives a valid JWT that can be used for authentication against the backend server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "The user provides his credentials and receives a valid JWT that can be used for authentication against the backend server.",
                "parameters": [
                    {
                        "description": "No further comment",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Login.LoginCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Login.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/sets": {
            "get": {
                "description": "Retrieve all sets.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Retrieve all sets.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetSets.getSetsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sets/{code}": {
            "get": {
                "description": "Retrieve a specific set.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Retrieve a specific set.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the set.",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetSet.getSetResponse"
                        }
                    },
                    "404": {
                        "description": "Set does not exist.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sets/{code}/cards": {
            "get": {
                "description": "Retrieve all cards of a specific set.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Yu-Gi-Oh"
                ],
                "summary": "Retrieve all cards of a specific set.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the set.",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetSetCards.getSetCardsResponse"
                        }
                    },
                    "404": {
                        "description": "Set does not exist or set contains no cards.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the current user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve the current user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetCurrentUser.getCurrentUserResponse"
                        }
                    },
                    "400": {
                        "description": "Body contains invalid data.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/friends": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the friends of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve the friends of a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Friend"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/friends/requests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the friend requests of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve the friend requests of a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.FriendRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "send/accept a friend request from the current user to another. When the target user does not exist, nothing happens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "send/accept a friend request from the current user to another.",
                "parameters": [
                    {
                        "description": "Contains the email of the target user.",
                        "name": "targetUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Cannot post a request to yourself.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/friends/requests/{targetUser}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "send/accept a friend request from the current user to another. When the target user does not exist, nothing happens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "send/accept a friend request from the current user to another.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Contains the id of the target user.",
                        "name": "targetUser",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Cannot post a request to yourself.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all users with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve all users with pagination.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Current page for the pagination.",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The size for the pages.",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetUsers.getUsersResponse"
                        }
                    },
                    "400": {
                        "description": "The page parameter cannot exceed the available amount of pages.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Creates a new user.",
                "parameters": [
                    {
                        "description": "Contains the information for the new user.",
                        "name": "user_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PostUsers.postUsersRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Body contains invalid data.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Deletes a user.",
                "parameters": [
                    {
                        "description": "Contains the identifier for the to be deleted user.",
                        "name": "user_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.DeleteUser.deleteUserRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Contains the authorization token.",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Body contains invalid data.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User does not exist.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.DeleteUser.deleteUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.GetCards.getCardResponse": {
            "type": "object",
            "properties": {
                "card_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "number": {
                    "type": "integer"
                }
            }
        },
        "api.GetCurrentUser.getCurrentUserResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_admin": {
                    "type": "boolean"
                }
            }
        },
        "api.GetRandomCards.getRandomCardsResponse": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Card"
                    }
                }
            }
        },
        "api.GetSet.getSetResponse": {
            "type": "object",
            "properties": {
                "set": {
                    "$ref": "#/definitions/model.CardSet"
                }
            }
        },
        "api.GetSetCards.getSetCardsResponse": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Card"
                    }
                },
                "set": {
                    "$ref": "#/definitions/model.CardSet"
                }
            }
        },
        "api.GetSets.getSetsResponse": {
            "type": "object",
            "properties": {
                "sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CardSet"
                    }
                }
            }
        },
        "api.GetUsers.getUsersResponse": {
            "type": "object",
            "properties": {
                "numberOfPages": {
                    "type": "integer"
                },
                "numberOfUsers": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "api.Login.LoginCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.Login.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "api.PostUsers.postUsersRequest": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.Card": {
            "type": "object",
            "properties": {
                "atk": {
                    "type": "integer"
                },
                "attribute": {
                    "type": "string"
                },
                "card_images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CardImage"
                    }
                },
                "card_sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CardSet"
                    }
                },
                "def": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "race": {
                    "type": "string"
                },
                "sets": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.CardImage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "image_url_small": {
                    "type": "string"
                }
            }
        },
        "model.CardSet": {
            "type": "object",
            "properties": {
                "set_code": {
                    "type": "string"
                },
                "set_name": {
                    "type": "string"
                },
                "set_rarity": {
                    "type": "string"
                },
                "set_rarity_code": {
                    "type": "string"
                }
            }
        },
        "model.Friend": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.FriendRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "invitation_date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "password_hash": {
                    "type": "string"
                }
            }
        }
    }
}