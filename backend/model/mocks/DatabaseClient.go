// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	testing "testing"
)

// DatabaseClient is an autogenerated mock type for the DatabaseClient type
type DatabaseClient struct {
	mock.Mock
}

// Exec provides a mock function with given fields: query, args
func (_m *DatabaseClient) Exec(query string, args ...interface{}) (pgconn.CommandTag, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func(string, ...interface{}) pgconn.CommandTag); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgconn.CommandTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query, args
func (_m *DatabaseClient) Query(query string, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 pgx.Rows
	if rf, ok := ret.Get(0).(func(string, ...interface{}) pgx.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: query, args
func (_m *DatabaseClient) QueryRow(query string, args ...interface{}) (pgx.Row, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) pgx.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: query, targetObject, args
func (_m *DatabaseClient) Select(query string, targetObject interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query, targetObject)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(query, targetObject, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabaseClient creates a new instance of DatabaseClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseClient(t testing.TB) *DatabaseClient {
	mock := &DatabaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
