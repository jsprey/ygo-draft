// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "ygodraft/backend/model"

	mock "github.com/stretchr/testify/mock"
)

// YgoClient is an autogenerated mock type for the YgoClient type
type YgoClient struct {
	mock.Mock
}

// GetAllCards provides a mock function with given fields:
func (_m *YgoClient) GetAllCards() (*[]*model.Card, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCards")
	}

	var r0 *[]*model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]*model.Card, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]*model.Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCardsWithFilter provides a mock function with given fields: filter
func (_m *YgoClient) GetAllCardsWithFilter(filter model.CardFilter) (*[]*model.Card, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCardsWithFilter")
	}

	var r0 *[]*model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CardFilter) (*[]*model.Card, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.CardFilter) *[]*model.Card); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CardFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSets provides a mock function with given fields:
func (_m *YgoClient) GetAllSets() (*[]*model.CardSet, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSets")
	}

	var r0 *[]*model.CardSet
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]*model.CardSet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]*model.CardSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*model.CardSet)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: id
func (_m *YgoClient) GetCard(id int) (*model.Card, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Card, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Card); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSet provides a mock function with given fields: setCode
func (_m *YgoClient) GetSet(setCode string) (*model.CardSet, error) {
	ret := _m.Called(setCode)

	if len(ret) == 0 {
		panic("no return value specified for GetSet")
	}

	var r0 *model.CardSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CardSet, error)); ok {
		return rf(setCode)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CardSet); ok {
		r0 = rf(setCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CardSet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(setCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewYgoClient creates a new instance of YgoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewYgoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *YgoClient {
	mock := &YgoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
