// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "ygodraft/backend/model"

	mock "github.com/stretchr/testify/mock"
)

// UsermgtClient is an autogenerated mock type for the UsermgtClient type
type UsermgtClient struct {
	mock.Mock
}

// CountUsers provides a mock function with given fields:
func (_m *UsermgtClient) CountUsers() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: newUser
func (_m *UsermgtClient) CreateUser(newUser model.User) error {
	ret := _m.Called(newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id, userEmail
func (_m *UsermgtClient) DeleteUser(id int, userEmail string) error {
	ret := _m.Called(id, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, userEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFriendRequests provides a mock function with given fields: userID
func (_m *UsermgtClient) GetFriendRequests(userID int) ([]model.FriendRequest, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFriendRequests")
	}

	var r0 []model.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.FriendRequest, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.FriendRequest); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriends provides a mock function with given fields: userID
func (_m *UsermgtClient) GetFriends(userID int) ([]model.Friend, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFriends")
	}

	var r0 []model.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.Friend, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.Friend); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationshipStatus provides a mock function with given fields: userID, user2ID
func (_m *UsermgtClient) GetRelationshipStatus(userID int, user2ID int) (model.RelationshipStatus, error) {
	ret := _m.Called(userID, user2ID)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationshipStatus")
	}

	var r0 model.RelationshipStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (model.RelationshipStatus, error)); ok {
		return rf(userID, user2ID)
	}
	if rf, ok := ret.Get(0).(func(int, int) model.RelationshipStatus); ok {
		r0 = rf(userID, user2ID)
	} else {
		r0 = ret.Get(0).(model.RelationshipStatus)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, user2ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: email
func (_m *UsermgtClient) GetUser(email string) (*model.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UsermgtClient) GetUserByID(id int) (*model.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: page, pageSize
func (_m *UsermgtClient) GetUsers(page int, pageSize int) ([]model.User, error) {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]model.User, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []model.User); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRelationshipStatus provides a mock function with given fields: userID, user2ID, status
func (_m *UsermgtClient) SetRelationshipStatus(userID int, user2ID int, status model.RelationshipStatus) error {
	ret := _m.Called(userID, user2ID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetRelationshipStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, model.RelationshipStatus) error); ok {
		r0 = rf(userID, user2ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsermgtClient creates a new instance of UsermgtClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsermgtClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsermgtClient {
	mock := &UsermgtClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
