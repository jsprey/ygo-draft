// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	model "ygodraft/backend/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// YGOJwtAuthClient is an autogenerated mock type for the YGOJwtAuthClient type
type YGOJwtAuthClient struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: username, permission
func (_m *YGOJwtAuthClient) GenerateToken(username string, permission int) (string, error) {
	ret := _m.Called(username, permission)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(username, permission)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(username, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *YGOJwtAuthClient) ValidateToken(tokenString string) (*model.YgoClaims, error) {
	ret := _m.Called(tokenString)

	var r0 *model.YgoClaims
	if rf, ok := ret.Get(0).(func(string) *model.YgoClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.YgoClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewYGOJwtAuthClient creates a new instance of YGOJwtAuthClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewYGOJwtAuthClient(t testing.TB) *YGOJwtAuthClient {
	mock := &YGOJwtAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
